// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = []
  enableTracing = false
  logLevel = "info"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  name           String?
  password       String?
  googleId       String?       @unique
  plan           Plan          @default(FREE)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deepseekApiKey String?
  geminiApiKey   String?
  grokApiKey     String?
  openaiApiKey   String?
  coverLetters   CoverLetter[]
  jobPosts       JobPost[]
  llmSettings    LLMSettings?
  resumes        Resume[]
  emailVerified  DateTime?
  image          String?
  sessions       Session[]
}

model Resume {
  id                 String   @id @default(cuid())
  userId             String
  content            String?
  format             String   @default("latex")
  isPrimary          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  cloudinaryPublicId String?
  fileName           String
  filePath           String
  user               User     @relation(fields: [userId], references: [id])
}

model JobPost {
  id              String        @id @default(cuid())
  title           String
  company         String
  companyUrl      String?
  jobUrl          String
  country         String?
  city            String?
  state           String?
  isRemote        Boolean       @default(false)
  description     String?
  jobType         String?
  salaryInterval  String?
  salaryMinAmount Float?
  salaryMaxAmount Float?
  salaryCurrency  String?
  datePosted      DateTime
  companyIndustry String?
  companyLogo     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  coverLetters    CoverLetter[]
  user            User          @relation(fields: [userId], references: [id])
}

model LLMSettings {
  id        String   @id @default(cuid())
  provider  String   @default("openai")
  model     String   @default("gpt-4-turbo-preview")
  apiKey    String?
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model CoverLetter {
  id        String   @id @default(cuid())
  filePath  String
  fileName  String
  userId    String
  jobId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  job       JobPost  @relation(fields: [jobId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Plan {
  FREE
  BASIC
  PREMIUM
}
